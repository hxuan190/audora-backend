services:
  # Main application database for Audora
  audora-db:
    image: postgres:15-alpine
    container_name: audora-postgres
    environment:
      POSTGRES_USER: ${AUDORA_DB_USER:-postgres}
      POSTGRES_PASSWORD: ${AUDORA_DB_PASSWORD:-postgres}
      POSTGRES_DB: ${AUDORA_DB_NAME:-audora}
    ports:
      - "5432:5432"
    volumes:
      - audora_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUDORA_DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audora-network

  # Kratos identity service database
  kratos-db:
    image: postgres:15-alpine
    container_name: kratos-postgres
    environment:
      POSTGRES_USER: ${KRATOS_DB_USER:-kratos}
      POSTGRES_PASSWORD: ${KRATOS_DB_PASSWORD:-kratos}
      POSTGRES_DB: ${KRATOS_DB_NAME:-kratos}
    ports:
      - "5433:5432"
    volumes:
      - kratos_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KRATOS_DB_USER:-kratos}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - audora-network

  # MinIO object storage with enhanced configuration
  minio:
    image: minio/minio:latest
    container_name: audora-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      # Security settings
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
      MINIO_SERVER_URL: http://localhost:9000
      # Console branding
      MINIO_BROWSER_LOGIN_ANIMATION: off
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console port
    volumes:
      - minio_data:/data
      # Mount additional MinIO configuration if needed
      # - ./minio-config:/etc/minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - audora-network

  # Enhanced MinIO setup service
  minio-setup:
    image: alpine:latest
    container_name: minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - ./scripts/setup-minio.sh:/setup-minio.sh
      - ./scripts/minio-policy.json:/minio-policy.json
    command: sh /setup-minio.sh
    networks:
      - audora-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: audora-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-audora-redis-pass}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - audora-network

  # Kratos database migration
  kratos-migrate:
    image: oryd/kratos:latest
    container_name: kratos-migrate
    depends_on:
      kratos-db:
        condition: service_healthy
    environment:
      DSN: postgres://${KRATOS_DB_USER:-kratos}:${KRATOS_DB_PASSWORD:-kratos}@kratos-db:5432/${KRATOS_DB_NAME:-kratos}?sslmode=disable&max_conns=50&max_idle_conns=10
    volumes:
      - ./kratos:/etc/config/kratos
    command: migrate sql -e -y
    networks:
      - audora-network

  # Ory Kratos identity service
  kratos:
    image: oryd/kratos:latest
    container_name: audora-kratos
    depends_on:
      kratos-db:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
    environment:
      # Database
      DSN: postgres://${KRATOS_DB_USER:-kratos}:${KRATOS_DB_PASSWORD:-kratos}@kratos-db:5432/${KRATOS_DB_NAME:-kratos}?sslmode=disable&max_conns=50&max_idle_conns=10
      
      # URLs
      SERVE_PUBLIC_BASE_URL: ${KRATOS_PUBLIC_URL:-http://localhost:4433}
      SERVE_ADMIN_BASE_URL: ${KRATOS_ADMIN_URL:-http://localhost:4434}
      SELFSERVICE_DEFAULT_BROWSER_RETURN_URL: ${AUDORA_APP_URL:-http://localhost:3000}/dashboard
      SELFSERVICE_FLOWS_ERROR_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/error
      SELFSERVICE_FLOWS_SETTINGS_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/settings
      SELFSERVICE_FLOWS_VERIFICATION_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/verification
      SELFSERVICE_FLOWS_RECOVERY_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/recovery
      SELFSERVICE_FLOWS_LOGIN_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/login
      SELFSERVICE_FLOWS_REGISTRATION_UI_URL: ${AUDORA_APP_URL:-http://localhost:3000}/auth/register
      SELFSERVICE_FLOWS_LOGOUT_REDIRECT_URL: ${AUDORA_APP_URL:-http://localhost:3000}
      
      # Webhooks
      SELFSERVICE_FLOWS_AFTER_REGISTRATION_HOOK_URL: http://audora-api:8080/api/v1/internal/hooks/after-registration
      
      # Secrets (Change these in production!)
      SECRETS_COOKIE: ${KRATOS_SECRET_COOKIE:-63f4945d921d599f27ae4fdf5bada3f1}
      SECRETS_CIPHER: ${KRATOS_SECRET_CIPHER:-cf62abb2197c0a173c9a76b88caaedc3}
      
      # OAuth (Add when ready)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      
      # Email (Use Mailhog for development)
      COURIER_SMTP_CONNECTION_URI: ${KRATOS_COURIER_SMTP_CONNECTION_URI:-smtp://mailhog:1025}
      COURIER_SMTP_FROM_ADDRESS: ${KRATOS_COURIER_SMTP_FROM_ADDRESS:-noreply@audora.com}
      
      # Development mode
      LOG_LEVEL: ${KRATOS_LOG_LEVEL:-debug}
      DEV_DISABLE_CSRF: ${KRATOS_DEV_DISABLE_CSRF:-true}
      
    ports:
      - "4433:4433"
      - "4434:4434"
    volumes:
      - ./kratos:/etc/config/kratos
    command: serve --config /etc/config/kratos/kratos.yml --dev
    networks:
      - audora-network

  # Go backend application
  audora-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: audora-api
    depends_on:
      audora-db:
        condition: service_healthy
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    environment:
      # App
      APP_ENV: ${APP_ENV:-development}
      APP_PORT: ${APP_PORT:-8080}
      
      # Database
      AUDORA_DB_HOST: audora-db
      AUDORA_DB_PORT: 5432
      AUDORA_DB_USER: ${AUDORA_DB_USER:-postgres}
      AUDORA_DB_PASSWORD: ${AUDORA_DB_PASSWORD:-postgres}
      AUDORA_DB_NAME: ${AUDORA_DB_NAME:-audora}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-audora-redis-pass}
      
      # MinIO Configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET_NAME: audora
      MINIO_TRACKS_BUCKET: audora-tracks
      MINIO_PROCESSED_BUCKET: processed-tracks
      MINIO_USE_SSL: false
      
      # Pipeline Service Account (for processing)
      MINIO_PIPELINE_ACCESS_KEY: pipeline-user
      MINIO_PIPELINE_SECRET_KEY: pipeline-secret-key
      
      # Kratos
      KRATOS_PUBLIC_URL: http://kratos:4433
      KRATOS_ADMIN_URL: http://kratos:4434
      
      # JWT for internal use
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
      
      # File Upload Settings
      MAX_UPLOAD_SIZE: 600MB
      ALLOWED_AUDIO_FORMATS: flac,wav,aiff,mp3
      PROCESSING_TIMEOUT: 600s
      
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      # Mount temporary processing directory
      - processing_temp:/tmp/audora-processing
    networks:
      - audora-network

  # Mailhog for email testing (Development only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: audora-mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - audora-network

  # Optional: Prometheus for monitoring (uncomment if needed)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: audora-prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - audora-network

  # Optional: Grafana for dashboards (uncomment if needed)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: audora-grafana
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - audora-network

volumes:
  audora_data:
  kratos_data:
  minio_data:
  redis_data:
  processing_temp:
  # grafana_data:  # Uncomment if using Grafana

networks:
  audora-network:
    driver: bridge